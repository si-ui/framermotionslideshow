import * as React from "react"
import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { wrap } from "popmotion"
import {
    Frame,
    addPropertyControls,
    ControlType,
    Override,
    useTransform,
} from "framer"
import "./styles.css"

const slidevariants = {
    enter: (direction: number) => {
        return {
            x: direction > 0 ? 1000 : -1000,
            opacity: 0,
        }
    },
    center: {
        zIndex: 1,
        x: 0,
        opacity: 1,
    },
    exit: (direction: number) => {
        return {
            zIndex: 0,
            x: direction < 0 ? 1000 : -1000,
            opacity: 0,
        }
    },
}

const fadevariants = {
    enter: (direction: number) => {
        return {
            opacity: 0,
        }
    },
    center: {
        zIndex: 1,
        x: 0,
        opacity: 1,
    },
    exit: (direction: number) => {
        return {
            zIndex: 0,
            opacity: 0,
        }
    },
}

/**
 * Experimenting with distilling swipe offset and velocity into a single variable, so the
 * less distance a user has swiped, the more velocity they need to register as a swipe.
 * Should accomodate longer swipes and short flicks without having binary checks on
 * just distance thresholds and velocity > 0.
 */
const swipeConfidenceThreshold = 10000
const swipePower = (offset: number, velocity: number) => {
    return Math.abs(offset) * velocity
}

export const Motion_hero = (props) => {
    const [[page, direction], setPage] = useState([0, 0])

    const {
        defaultindex,
        exitbeforeenter,
        duration,
        delay,
        loop,
        isSpring,
        stiffness,
        damping,
        mass,
        loopAmount,
        easeString,
        easePreset,
        easeCustom,
        repeatDelay,
        restSpeed,
        restDelta,
        yoyo,
        yoyoAmount,
    } = props

    const [transition, setTransition] = React.useState("spring")
    const easeCubicBezier = easeCustom.split(",").map(Number)

    const springTransition = {
        type: "spring",
        stiffness: stiffness,
        damping: damping,
        mass: mass,
        restSpeed,
        restDelta,
        delay: delay,
    }

    const tweenTransition = {
        type: "tween",
        ease: easeString ? easePreset : easeCubicBezier,
        duration: duration,
        delay: delay,
        loop: loop ? loopAmount : Infinity,
        yoyo: yoyo ? yoyoAmount : Infinity,
        repeatDelay: repeatDelay,
    }

    // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and
    // then wrap that within 0-2 to find our image ID in the array below. By passing an
    // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will
    // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.
    const imageIndex = wrap(0, props.images.length, page)

    const paginate = (newDirection: number) => {
        setPage([page + newDirection, newDirection])
    }

    const [seconds, setSeconds] = useState(0)

    React.useEffect(() => {
        paginate(props.defaultindex)
    }, [props.defaultindex])

    useEffect(() => {
        const interval = setInterval(() => {
            setSeconds((seconds) => seconds + 1)
            props.autoplay ? paginate(1) : null
            console.log("Current page is " + imageIndex)
            // props.defaultindex = imageIndex
        }, props.autoplaydelay)

        return () => clearInterval(interval)
    }, [paginate])

    return (
        <>
            <AnimatePresence
                initial={false}
                custom={direction}
                exitBeforeEnter={exitbeforeenter}
            >
                <motion.img
                    key={page}
                    src={props.images[imageIndex]}
                    custom={direction}
                    variants={
                        props.effect === "Default"
                            ? slidevariants
                            : fadevariants
                    }
                    initial="enter"
                    animate="center"
                    exit="exit"
                    transition={{
                        x: isSpring ? springTransition : tweenTransition,
                        opacity: { duration: props.duration },
                    }}
                    drag="x"
                    dragConstraints={{ left: 0, right: 0 }}
                    dragElastic={1}
                    onDragEnd={(e, { offset, velocity }) => {
                        const swipe = swipePower(offset.x, velocity.x)

                        if (swipe < -swipeConfidenceThreshold) {
                            paginate(1)
                        } else if (swipe > swipeConfidenceThreshold) {
                            paginate(-1)
                        }
                    }}
                />
            </AnimatePresence>
            <div className="next" onClick={() => paginate(+1)}>
                {"‣"}
            </div>
            <div className="prev" onClick={() => paginate(-1)}>
                {"‣"}
            </div>
        </>
    )
}

Motion_hero.defaultProps = {
    exitbeforeenter: false,
    autoplay: false,
    effect: "Default",
    duration: 1,
    delay: 0,
    isSpring: true,
    loop: true,
    stiffness: 200,
    damping: 20,
    mass: 1,
    loopAmount: 0,
    yoyo: true,
    yoyoAmount: 0,
    easeString: true,
    easePreset: "ease",
    easeCustom: "0.645, 0.045, 0.355, 1",
    repeatDelay: 0,
    restSpeed: 0.01,
    restDelta: 0.01,
    height: 720,
    width: 1280,
    images: [
        "https://d33wubrfki0l68.cloudfront.net/dd23708ebc4053551bb33e18b7174e73b6e1710b/dea24/static/images/wallpapers/shared-colors@2x.png",
    ],
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(Motion_hero, {
    defaultindex: {
        title: "Slide #",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 1000,
        step: 1,
        displayStepper: true,
    },
    autoplay: {
        type: ControlType.Boolean,
        title: "Autoplay?",
        enabledTitle: "True",
        disabledTitle: "False",
    },
    autoplaydelay: {
        title: "Delay",
        type: ControlType.Number,
        defaultValue: 5000,
        min: 0,
        step: 1,
        displayStepper: true,
        hidden(props) {
            return props.autoplay === false
        },
    },
    exitbeforeenter: {
        type: ControlType.Boolean,
        title: "Exit before enter",
        enabledTitle: "True",
        disabledTitle: "False",
    },
    effect: {
        type: ControlType.Enum,
        title: "Effect",
        options: ["Default", "Fade"],
        optionTitles: ["Default", "Fade"],
        hidden(props) {
            return props.transition === true
        },
    },
    isSpring: {
        type: ControlType.Boolean,
        title: "Type",
        enabledTitle: "Spring",
        disabledTitle: "Ease",
    },
    easeString: {
        type: ControlType.Boolean,
        title: "Ease",
        enabledTitle: "Preset",
        disabledTitle: "Custom",
        hidden(props) {
            return props.isSpring === true
        },
    },
    easeCustom: {
        type: ControlType.String,
        title: "Bezier",
        placeholder: "Cubic Bezier Values",
        hidden(props) {
            return props.isSpring === true || props.easeString === true
        },
    },
    easePreset: {
        type: ControlType.Enum,
        title: "Presets",
        defaultValue: "easeInOut",
        options: [
            "linear",
            "easeIn",
            "easeOut",
            "easeInOut",
            "circIn",
            "circOut",
            "circInOut",
            "backIn",
            "backOut",
            "backInOut",
            "anticipate",
        ],
        optionTitles: [
            "Linear",
            "Ease In",
            "Ease Out",
            "Ease In Out",
            "Circ In",
            "Circ Out",
            "Circ In Out",
            "Back In",
            "Back Out",
            "Back In Out",
            "Anticipate",
        ],
        hidden(props) {
            return props.isSpring === true || props.easeString === false
        },
    },
    duration: {
        type: ControlType.Number,
        title: "Duration",
        min: 0,
        max: 10,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === true
        },
    },
    stiffness: {
        type: ControlType.Number,
        title: "Stiffness",
        min: 0,
        max: 1000,
        hidden(props) {
            return props.isSpring === false
        },
    },
    damping: {
        type: ControlType.Number,
        title: "Damping",
        min: 0,
        max: 100,
        hidden(props) {
            return props.isSpring === false
        },
    },
    mass: {
        type: ControlType.Number,
        title: "Mass",
        min: 0,
        max: 100,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    restSpeed: {
        type: ControlType.Number,
        title: "RestSpeed",
        min: 0,
        max: 1,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    restDelta: {
        type: ControlType.Number,
        title: "RestDelta",
        min: 0,
        max: 1,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    delay: {
        type: ControlType.Number,
        title: "Delay",
        min: 0,
        max: 10,
        displayStepper: true,
        step: 0.1,
    },
    images: {
        type: ControlType.Array,
        propertyControl: {
            type: ControlType.Image,
        },
    },
})
import * as React from "react"
import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { wrap } from "popmotion"
import {
    Frame,
    addPropertyControls,
    ControlType,
    Override,
    useTransform,
} from "framer"
import "./styles.css"

const slidevariants = {
    enter: (direction: number) => {
        return {
            x: direction > 0 ? 1000 : -1000,
            opacity: 0,
        }
    },
    center: {
        zIndex: 1,
        x: 0,
        opacity: 1,
    },
    exit: (direction: number) => {
        return {
            zIndex: 0,
            x: direction < 0 ? 1000 : -1000,
            opacity: 0,
        }
    },
}

const fadevariants = {
    enter: (direction: number) => {
        return {
            opacity: 0,
        }
    },
    center: {
        zIndex: 1,
        x: 0,
        opacity: 1,
    },
    exit: (direction: number) => {
        return {
            zIndex: 0,
            opacity: 0,
        }
    },
}

/**
 * Experimenting with distilling swipe offset and velocity into a single variable, so the
 * less distance a user has swiped, the more velocity they need to register as a swipe.
 * Should accomodate longer swipes and short flicks without having binary checks on
 * just distance thresholds and velocity > 0.
 */
const swipeConfidenceThreshold = 10000
const swipePower = (offset: number, velocity: number) => {
    return Math.abs(offset) * velocity
}

export const Motion_hero = (props) => {
    const [[page, direction], setPage] = useState([0, 0])

    const {
        defaultindex,
        exitbeforeenter,
        duration,
        delay,
        loop,
        isSpring,
        stiffness,
        damping,
        mass,
        loopAmount,
        easeString,
        easePreset,
        easeCustom,
        repeatDelay,
        restSpeed,
        restDelta,
        yoyo,
        yoyoAmount,
    } = props

    const [transition, setTransition] = React.useState("spring")
    const easeCubicBezier = easeCustom.split(",").map(Number)

    const springTransition = {
        type: "spring",
        stiffness: stiffness,
        damping: damping,
        mass: mass,
        restSpeed,
        restDelta,
        delay: delay,
    }

    const tweenTransition = {
        type: "tween",
        ease: easeString ? easePreset : easeCubicBezier,
        duration: duration,
        delay: delay,
        loop: loop ? loopAmount : Infinity,
        yoyo: yoyo ? yoyoAmount : Infinity,
        repeatDelay: repeatDelay,
    }

    // We only have 3 images, but we paginate them absolutely (ie 1, 2, 3, 4, 5...) and
    // then wrap that within 0-2 to find our image ID in the array below. By passing an
    // absolute page index as the `motion` component's `key` prop, `AnimatePresence` will
    // detect it as an entirely new image. So you can infinitely paginate as few as 1 images.
    const imageIndex = wrap(0, props.images.length, page)

    const paginate = (newDirection: number) => {
        setPage([page + newDirection, newDirection])
    }

    const [seconds, setSeconds] = useState(0)

    React.useEffect(() => {
        paginate(props.defaultindex)
    }, [props.defaultindex])

    useEffect(() => {
        const interval = setInterval(() => {
            setSeconds((seconds) => seconds + 1)
            props.autoplay ? paginate(1) : null
            console.log("Current page is " + imageIndex)
            // props.defaultindex = imageIndex
        }, props.autoplaydelay)

        return () => clearInterval(interval)
    }, [paginate])

    return (
        <>
            <AnimatePresence
                initial={false}
                custom={direction}
                exitBeforeEnter={exitbeforeenter}
            >
                <motion.img
                    key={page}
                    src={props.images[imageIndex]}
                    custom={direction}
                    variants={
                        props.effect === "Default"
                            ? slidevariants
                            : fadevariants
                    }
                    initial="enter"
                    animate="center"
                    exit="exit"
                    transition={{
                        x: isSpring ? springTransition : tweenTransition,
                        opacity: { duration: props.duration },
                    }}
                    drag="x"
                    dragConstraints={{ left: 0, right: 0 }}
                    dragElastic={1}
                    onDragEnd={(e, { offset, velocity }) => {
                        const swipe = swipePower(offset.x, velocity.x)

                        if (swipe < -swipeConfidenceThreshold) {
                            paginate(1)
                        } else if (swipe > swipeConfidenceThreshold) {
                            paginate(-1)
                        }
                    }}
                />
            </AnimatePresence>
            <div className="next" onClick={() => paginate(+1)}>
                {"‣"}
            </div>
            <div className="prev" onClick={() => paginate(-1)}>
                {"‣"}
            </div>
        </>
    )
}

Motion_hero.defaultProps = {
    exitbeforeenter: false,
    autoplay: false,
    effect: "Default",
    duration: 1,
    delay: 0,
    isSpring: true,
    loop: true,
    stiffness: 200,
    damping: 20,
    mass: 1,
    loopAmount: 0,
    yoyo: true,
    yoyoAmount: 0,
    easeString: true,
    easePreset: "ease",
    easeCustom: "0.645, 0.045, 0.355, 1",
    repeatDelay: 0,
    restSpeed: 0.01,
    restDelta: 0.01,
    height: 720,
    width: 1280,
    images: [
        "https://d33wubrfki0l68.cloudfront.net/dd23708ebc4053551bb33e18b7174e73b6e1710b/dea24/static/images/wallpapers/shared-colors@2x.png",
    ],
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(Motion_hero, {
    defaultindex: {
        title: "Slide #",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 1000,
        step: 1,
        displayStepper: true,
    },
    autoplay: {
        type: ControlType.Boolean,
        title: "Autoplay?",
        enabledTitle: "True",
        disabledTitle: "False",
    },
    autoplaydelay: {
        title: "Delay",
        type: ControlType.Number,
        defaultValue: 5000,
        min: 0,
        step: 1,
        displayStepper: true,
        hidden(props) {
            return props.autoplay === false
        },
    },
    exitbeforeenter: {
        type: ControlType.Boolean,
        title: "Exit before enter",
        enabledTitle: "True",
        disabledTitle: "False",
    },
    effect: {
        type: ControlType.Enum,
        title: "Effect",
        options: ["Default", "Fade"],
        optionTitles: ["Default", "Fade"],
        hidden(props) {
            return props.transition === true
        },
    },
    isSpring: {
        type: ControlType.Boolean,
        title: "Type",
        enabledTitle: "Spring",
        disabledTitle: "Ease",
    },
    easeString: {
        type: ControlType.Boolean,
        title: "Ease",
        enabledTitle: "Preset",
        disabledTitle: "Custom",
        hidden(props) {
            return props.isSpring === true
        },
    },
    easeCustom: {
        type: ControlType.String,
        title: "Bezier",
        placeholder: "Cubic Bezier Values",
        hidden(props) {
            return props.isSpring === true || props.easeString === true
        },
    },
    easePreset: {
        type: ControlType.Enum,
        title: "Presets",
        defaultValue: "easeInOut",
        options: [
            "linear",
            "easeIn",
            "easeOut",
            "easeInOut",
            "circIn",
            "circOut",
            "circInOut",
            "backIn",
            "backOut",
            "backInOut",
            "anticipate",
        ],
        optionTitles: [
            "Linear",
            "Ease In",
            "Ease Out",
            "Ease In Out",
            "Circ In",
            "Circ Out",
            "Circ In Out",
            "Back In",
            "Back Out",
            "Back In Out",
            "Anticipate",
        ],
        hidden(props) {
            return props.isSpring === true || props.easeString === false
        },
    },
    duration: {
        type: ControlType.Number,
        title: "Duration",
        min: 0,
        max: 10,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === true
        },
    },
    stiffness: {
        type: ControlType.Number,
        title: "Stiffness",
        min: 0,
        max: 1000,
        hidden(props) {
            return props.isSpring === false
        },
    },
    damping: {
        type: ControlType.Number,
        title: "Damping",
        min: 0,
        max: 100,
        hidden(props) {
            return props.isSpring === false
        },
    },
    mass: {
        type: ControlType.Number,
        title: "Mass",
        min: 0,
        max: 100,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    restSpeed: {
        type: ControlType.Number,
        title: "RestSpeed",
        min: 0,
        max: 1,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    restDelta: {
        type: ControlType.Number,
        title: "RestDelta",
        min: 0,
        max: 1,
        displayStepper: true,
        step: 0.1,
        hidden(props) {
            return props.isSpring === false
        },
    },
    delay: {
        type: ControlType.Number,
        title: "Delay",
        min: 0,
        max: 10,
        displayStepper: true,
        step: 0.1,
    },
    images: {
        type: ControlType.Array,
        propertyControl: {
            type: ControlType.Image,
        },
    },
})
